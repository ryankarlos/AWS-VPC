AWSTemplateFormatVersion: "2010-09-09"
Description: "This template creates a custom VPC with public and private subnets in different availability zones."
Parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24
  NatGateway:
    Description: Whether to create NATGateway for private subnet or not
    AllowedValues:
        - true
        - false
    Type: String
  DefaultVPCid:
      Description: ID of the default VPC
      Type: String
      Default: "vpc-09eeb45f883f8307c"
  DefaultVPCCIDR:
      Description: Please enter the IP range (CIDR notation) for the Default VPC
      Type: String
      Default: 172.31.0.0/16
  DefaultVPCRouteTableid:
      Description: ID of the Default VPC Route Table associated with all the public subnets
      Type: String
      Default: "rtb-0b2f8616df9790bb5"

Conditions:
  CreateNatGateway: !Equals
    - !Ref NatGateway
    - true
  NoNatGateway: !Equals
    - !Ref NatGateway
    - false
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: vpc-2-pub-priv
  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      PeerVpcId: !Ref DefaultVPCid
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: Name
          Value: "PublicSubnet1"
  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: Name
          Value: "PublicSubnet2"
  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: Name
          Value: "PrivateSubnet1"
  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [ 3, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: Name
          Value: "PrivateSubnet2"
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - { Key: "Application", Value: "non-default" }
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: CreateNatGateway
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
  NATGateway:
    Type: "AWS::EC2::NatGateway"
    Condition: CreateNatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId:
        Ref: "PublicSubnet2"
      Tags:
        - Key: "Application"
          Value: "non-default"
  S3GatewayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:*'
            Resource:
              - '*'
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId:
        Ref: "VPC"
  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId:
        Ref: "InternetGateway"
      VpcId:
        Ref: "VPC"
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRoutewithNat:
    Type: AWS::EC2::Route
    Condition: CreateNatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateSubnetRoutetoDefaultVPC:
      Type: AWS::EC2::Route
      DependsOn: VPCPeeringConnection
      Properties:
          RouteTableId: !Ref PrivateRouteTable
          DestinationCidrBlock: !Ref DefaultVPCCIDR
          VpcPeeringConnectionId: !Ref VPCPeeringConnection
  PublicSubnetRoutetoDefaultVPC:
      Type: AWS::EC2::Route
      DependsOn: VPCPeeringConnection
      Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: !Ref DefaultVPCCIDR
          VpcPeeringConnectionId: !Ref VPCPeeringConnection
  PublicSubnetRoutefromDefaultVPC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DefaultVPCRouteTableid
      DestinationCidrBlock: !GetAtt VPC.CidrBlock
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
Outputs:
  VPC:
    Description: A reference to the created non-default VPC
    Value: !Ref VPC
    Export:
        Name: !Sub "${AWS::StackName}-id"

  PublicSubnets:
    Description: A list of the public (non-default) subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2]]


  PrivateSubnets:
    Description: A list of the private (non-default) subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ]


  PublicSubnet1:
    Description: A reference to the non-default public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
        Name: !Sub "${AWS::StackName}-pubic-subnet-1"

  PublicSubnet2:
    Description: A reference to the non-default public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
        Name: !Sub "${AWS::StackName}-pubic-subnet-2"

  PrivateSubnet1:
    Description: A reference to the non-default private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
        Name: !Sub "${AWS::StackName}-private-subnet-1"

  PrivateSubnet2:
    Description: A reference to the non-default private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
        Name: !Sub "${AWS::StackName}-private-subnet-2"

