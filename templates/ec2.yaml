Description: "Creates an ec2 instance in desired vpc subnet"
Parameters:
  InstanceTypeParameter:
    Type: String
    Description: Enter instance size. Default is t2.micro.
  Subnet:
    Description: "VPC Public Subnet for ec2 subnet group"
    Type: "String"
  AMI:
    Default: ami-0022f774911c1d690
    Type: String
    Description: "The AMI to use. Default is AWS Linux AMI"
  KeyName:
    Default: "aws-eb"
    Description: " The key used to access the instance."
    Type: "String"
  VPC:
      Description: "VPC Id for EC2 Security Group"
      Type: "String"
  ClientIP:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "It must be a valid IP CIDR range of the form x.x.x.x/x. Suggest to enable access to your IP address only. Pls get your address using checkip.amazonaws.com or whatsmyip.org."
    Description: "The IP address range that can be used to connect to the RDS instances from your local machine.It must be a valid IP CIDR range of the form x.x.x.x/x.Pls get your address using checkip.amazonaws.com or whatsmyip.org"
    Type: "String"
  Elasticip:
    Description: Whether to associate elastic ip for EC2
    AllowedValues:
        - true
        - false
    Type: String
Conditions:
  CreateElasticIP: !Equals
    - !Ref Elasticip
    - true
Resources:
    EC2Instance:
      Type: AWS::EC2::Instance
      # code deploy agent installation part taken from
      # https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/solutions/AmazonCloudWatchAgent/inline/amazon_linux.template
      Metadata:
          AWS::CloudFormation::Init:
              configSets:
                  default:
                      - 01_setupCfnHup
                      - 02_config-amazon-cloudwatch-agent
                      - 03_restart_amazon-cloudwatch-agent
                  UpdateEnvironment:
                      - 02_config-amazon-cloudwatch-agent
                      - 03_restart_amazon-cloudwatch-agent
              # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
              02_config-amazon-cloudwatch-agent:
                  files:
                      '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
                          content: !Sub |
                              {
                                "metrics": {
                                  "append_dimensions": {
                                    "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                                    "ImageId": "${!aws:ImageId}",
                                    "InstanceId": "${!aws:InstanceId}",
                                    "InstanceType": "${!aws:InstanceType}"
                                  },
                                  "metrics_collected": {
                                    "mem": {
                                      "measurement": [
                                        "mem_used_percent"
                                      ]
                                    },
                                    "swap": {
                                      "measurement": [
                                        "swap_used_percent"
                                      ]
                                    }
                                  }
                                }
                              }
              # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
              03_restart_amazon-cloudwatch-agent:
                  commands:
                      01_stop_service:
                          command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
                      02_start_service:
                          command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
              # Cfn-hup setting, it is to monitor the change of metadata.
              # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
              01_setupCfnHup:
                  files:
                      '/etc/cfn/cfn-hup.conf':
                          content: !Sub |
                              [main]
                              stack=${AWS::StackId}
                              region=${AWS::Region}
                              interval=1
                          mode: '000400'
                          owner: root
                          group: root
                      '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
                          content: !Sub |
                              [cfn-auto-reloader-hook]
                              triggers=post.update
                              path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                              action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets UpdateEnvironment
                              runas=root
                          mode: '000400'
                          owner: root
                          group: root
                      "/lib/systemd/system/cfn-hup.service":
                          content: !Sub |
                              [Unit]
                              Description=cfn-hup daemon
                              [Service]
                              Type=simple
                              ExecStart=/opt/aws/bin/cfn-hup
                              Restart=always
                              [Install]
                              WantedBy=multi-user.target
                  commands:
                      01enable_cfn_hup:
                          command: !Sub |
                              systemctl enable cfn-hup.service
                      02start_cfn_hup:
                          command: !Sub |
                              systemctl start cfn-hup.service
      Properties:
        ImageId: !Ref AMI
        SubnetId:
            Ref: "Subnet"
        KeyName: !Ref KeyName
        InstanceType:
            Ref: InstanceTypeParameter
        SecurityGroupIds:
            -   Ref: EC2SecurityGroup
        IamInstanceProfile: !Ref  EC2InstanceProfile
        UserData:
            # This script below is to install AmazonCloudWatchAgent, restart AmazonCloudWatchAgent and tell the result to cloudformation.
            Fn::Base64: !Sub |
                #!/bin/bash
                rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
                /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets default
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}
        Tags :
            -   Key: Name
                Value: Development
      CreationPolicy:
          ResourceSignal:
              Count: 1
              Timeout: "PT15M"
    ElasticIP:
        Type: AWS::EC2::EIP
        Condition: CreateElasticIP
        Properties:
            Domain: vpc
            InstanceId: !Ref EC2Instance

    EC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: "EC2 in non default vpc"
            VpcId: !Ref VPC
            SecurityGroupIngress:
                -   IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: "0.0.0.0/0"
                -   IpProtocol: tcp
                    FromPort: 443
                    ToPort: 443
                    CidrIp: "0.0.0.0/0"
                -   IpProtocol: tcp
                    FromPort: 22
                    ToPort: 22
                    CidrIp: !Ref ClientIP
                -   IpProtocol: icmp
                    FromPort: 8
                    ToPort: -1
                    CidrIp: !Ref ClientIP
            SecurityGroupEgress:
                -   CidrIp: "0.0.0.0/0"
                    IpProtocol: "-1"
            Tags:
                -   Key: Name
                    Value: EC2-non-default
    EC2InstanceRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2008-10-17'
                Statement:
                    -   Sid: ''
                        Effect: Allow
                        Principal:
                            Service: ec2.amazonaws.com
                        Action: sts:AssumeRole
            Path: /
            Policies:
                -   PolicyName: kms-decryption
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -   Effect: Allow
                                Action:
                                   - "kms:*"
                                   - "logs:*"
                                   - "ecr:*"
                                Resource: '*'
            RoleName: EC2Role-RDS-Redshift-S3-SSMSecrets
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/SecretsManagerReadWrite
                - arn:aws:iam::aws:policy/AmazonSSMFullAccess
                - arn:aws:iam::aws:policy/AmazonS3FullAccess
                - arn:aws:iam::aws:policy/AmazonRDSFullAccess
                - arn:aws:iam::aws:policy/AmazonRedshiftDataFullAccess
    EC2InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            InstanceProfileName: EC2Profile-RDS-Redshift-S3-SSMSecrets
            Roles:
                -   Ref: EC2InstanceRole
Outputs:
  EC2SecurityGroup:
    Description: A reference to the EC2 security group
    Value: !Ref EC2SecurityGroup
  PublicIp:
    Value:
      Fn::GetAtt:
        - EC2Instance
        - PublicIp
    Description: Server's PublicIp Address
