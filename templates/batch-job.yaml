Description: "Creates a batchjob for updating RDS db when S3 data is updated"
Parameters:
  Subnet:
    Description: "VPC Public Subnet for ec2 subnet group"
    Type: "String"
  SecurityGroup:
    Description: "Security Group ID for Instance"
    Type: "String"
Resources:
    BatchServiceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName:
                Fn::Join:
                    - ''
                    -   - 'NestedBatchStack'
                        - '-batchservice-role'
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: batch.amazonaws.com
                        Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
    EcsInstanceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: ECSInstanceRole
            AssumeRolePolicyDocument:
                Version: '2008-10-17'
                Statement:
                    -   Sid: ''
                        Effect: Allow
                        Principal:
                            Service: ec2.amazonaws.com
                        Action: sts:AssumeRole
            Path: /
            Policies:
                -   PolicyName: kms-decryption
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -   Effect: Allow
                                Action:
                                   - "kms:*"
                                   - "ec2:*"
                                   - "ecs:*"
                                   - "ecr:*"
                                   - "logs:*"
                                Resource: '*'
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/SecretsManagerReadWrite
                - arn:aws:iam::aws:policy/AmazonSSMFullAccess
                - arn:aws:iam::aws:policy/AmazonS3FullAccess
                - arn:aws:iam::aws:policy/AmazonRDSFullAccess
                - arn:aws:iam::aws:policy/AmazonRedshiftDataFullAccess
    IamInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Roles:
                -   Ref: EcsInstanceRole

    ExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: ECSExecutionRole
            AssumeRolePolicyDocument:
                Version: '2008-10-17'
                Statement:
                    -   Sid: ''
                        Effect: Allow
                        Principal:
                            Service: ecs-tasks.amazonaws.com
                        Action: sts:AssumeRole
            Path: /
            Policies:
                -   PolicyName: ecs-execution-policy
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -   Effect: Allow
                                Action:
                                    - "kms:*"
                                    - "ecs:*"
                                    - "ecr:*"
                                    - "logs:*"
                                Resource: '*'
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/SecretsManagerReadWrite
                - arn:aws:iam::aws:policy/AmazonSSMFullAccess
    TaskRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: ECSTaskRole
            AssumeRolePolicyDocument:
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: ecs-tasks.amazonaws.com
                        Action: 'sts:AssumeRole'
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonS3FullAccess
                - arn:aws:iam::aws:policy/AmazonRDSFullAccess
                - arn:aws:iam::aws:policy/AmazonRedshiftDataFullAccess
    # AWS Batch Job Definition
    BatchProcessingJobDefinition:
        Type: AWS::Batch::JobDefinition
        Properties:
          PlatformCapabilities: [FARGATE]
          Type: container
          JobDefinitionName:
            Fn::Join:
            - ''
            - - !Ref 'AWS::StackName'
              - '-update-RDS-data-from-S3'
          ContainerProperties:
              Image: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/awsbatch-rds:latest"
              LogConfiguration:
                      LogDriver: 'awslogs'
              #  All containers in this task are granted the permissions that are specified in this role.
              # For jobs that run on Fargate resources, you must provide an execution role."
              ExecutionRoleArn: !GetAtt ExecutionRole.Arn
              # "There is an optional task execution IAM role thar the container can assume for AWS permissions.
              # e.g. to make API calls to S3 to read objects "
              JobRoleArn: !GetAtt TaskRole.Arn
              NetworkConfiguration:
                  AssignPublicIp: ENABLED
              ResourceRequirements:
                  - Type: VCPU
                    Value: 2
                  - Type: MEMORY
                    Value: 4096
          RetryStrategy:
            Attempts: 1

      # AWS Batch Job Queue
    BatchProcessingJobQueue:
        Type: AWS::Batch::JobQueue
        Properties:
          JobQueueName:
            Fn::Join:
            - ''
            - - !Ref 'AWS::StackName'
              - '-update-RDS-data-from-S3'
          Priority: 1
          ComputeEnvironmentOrder:
          - Order: 1
            ComputeEnvironment:
              Ref: ComputeEnvironment

      # AWS Batch Compute Environment
    ComputeEnvironment:
        Type: AWS::Batch::ComputeEnvironment
        Properties:
          Type: MANAGED
          ComputeResources:
            Type: FARGATE
            MaxvCpus: 4
            Subnets:
            - Ref: Subnet
            SecurityGroupIds:
            - Ref: SecurityGroup
          ServiceRole:
            Ref: BatchServiceRole
     # Cloud Watch Rule to trigger AWS Batch jobs based on S3 put object events
    EventBridgeRule:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: EventBridge Source S3 Target Batch Job
        Name: S3-Source-Batch-Target
        EventPattern:
          source:
            - aws.s3
          detail-type:
            - 'AWS API Call via CloudTrail'
          detail:
              eventSource:
                  - s3.amazonaws.com
              eventName:
                  - PutObject
              requestParameters:
                  bucketName:
                      - s3-eventbridge-batch
                  key:
                      - sample-data.txt
        State: ENABLED
        Targets:
          - Arn: !Ref BatchProcessingJobQueue
            RoleArn: !GetAtt EventBridgeTargetRole.Arn
            Id: batch-job-RDS-update
            BatchParameters:
                JobDefinition: !Ref BatchProcessingJobDefinition
                JobName: BatchDBJobExecutedByCloudWatchRule
                RetryStrategy:
                    Attempts: 1
    EventBridgeTargetRole:
        Type: 'AWS::IAM::Role'
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - events.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          Path: /
          Policies:
            - PolicyName: EventBridge-Batch
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - "batch:SubmitJob"
                    Resource: '*'
Outputs:
  ComputeEnvironmentArn:
    Value:
      Ref: ComputeEnvironment
  BatchProcessingJobQueueArn:
    Value:
      Ref: BatchProcessingJobQueue
  BatchProcessingJobDefinitionArn:
    Value:
      Ref: BatchProcessingJobDefinition
  BatchServiceRoleArn:
    Value: !GetAtt BatchServiceRole.Arn
    Export:
        Name: !Sub "NestedBatchStack-ServiceRole"
  ECSInstanceRoleArn:
    Value:
      Ref: EcsInstanceRole
    Export:
        Name: "NestedBatchStack-ECSInstanceRole"
  ECSInstanceProfileArn:
    Value:
      Ref: IamInstanceProfile
    Export:
        Name: !Sub "NestedBatchStack-InstanceProfile"
